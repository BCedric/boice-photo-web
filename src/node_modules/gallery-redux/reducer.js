import { forEach } from 'lodash'
import { List, fromJS } from 'immutable'
import {types} from './actions'
import config from 'config'

const NB_IMAGES_TO_LOAD = 9

const loadImages = (imgs, state) => {
  console.log('state', state);
  var imgAddrsArray =state.imgAddr.toJS()
  var newImgAddr = state.imgAddr
  forEach(imgAddrsArray.filter((addr, index) => index < NB_IMAGES_TO_LOAD), imgAddr => {
    newImgAddr = newImgAddr.delete(newImgAddr.indexOf(fromJS(imgAddr)))
    imgs = imgs.push({src: config.adressServer+imgAddr.addr, width:imgAddr.width, height:imgAddr.height})
  })
  return { ...state, imgs, imgAddr: newImgAddr }
}

export default function galleryReducer(state = {}, action) {
  var imgs
  switch (action.type) {
    case types.SET_CURRENT_IMAGE:
      return {...state, currentImage: action.id}
    case types.SAVE_IMG_ADDRS:
      return {...state, imgAddr: fromJS(action.addrs.pictures), nbImgs: action.addrs.pictures.length }
    case types.LOAD_IMAGES:
      if(state.imgAddr !== undefined) {
        return loadImages(state.imgs === undefined ? imgs = List() : imgs = state.imgs, state)
      }
      return state
    case types.LOAD_MORE:
      if(state.imgAddr !== undefined) {
        return loadImages(state.imgs, state)
      }
      return state
    case types.SET_GALLERY_ID:
      return {...state, galleryId: action.galleryId}
    case types.SET_GALLERY_DESCRIPTION:
      return {...state, galleryDescription: action.galleryDescription}
      case types.SET_GALLERY_NAME:
        return {...state, galleryName: action.name}
    case types.RAZ_IMGS:
      return { ...state, imgs: undefined, imgAddr: undefined }
    case types.SET_LIGHTBOX_IS_OPEN:
      return {...state, lightboxIsOpen: action.bool}
    case types.SET_IS_FETCHING:
      return {...state, isFetching: action.bool}
    default:
      return state
  }
}
