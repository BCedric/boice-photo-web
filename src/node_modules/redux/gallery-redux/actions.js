import Http from 'utils/Http'

const types = {
  LOAD_IMAGES: 'LOAD_IMAGES',
  SET_GALLERY_ID: 'SET_GALLERY_ID',
  RAZ_IMGS: 'RAZ_IMGS',
  LOAD_MORE: 'LOAD_MORE',
  SET_IS_FETCHING: 'SET_IS_FETCHING',
  SET_GALLERY_NAME: 'SET_GALLERY_NAME',
  SET_GALLERY: 'SET_GALLERY'
}

function setGallery(gallery) {
  return {
    type: types.SET_GALLERY,
    gallery
  }
}

function setIsFetching(bool) {
  return {
    type: types.SET_IS_FETCHING,
    bool
  }
}

function setCurrentPictureIndex(id) {
  return {
    type: types.SET_CURRENT_PICTURE_INDEX,
    id
  }
}

const getPictures = galleryId =>
  galleryId != null
    ? fetchGallery(galleryId)
    : fetchPictures()

const fetchGallery = galleryId => {
  return function (dispatch) {
    dispatch(setIsFetching(true))
    return Http.get(`/gallery/${galleryId}`)
      .then(json => {
        return json
      })
      .then(async gallery => {
        const picturesLoaded = []
        dispatch(setGallery({ ...gallery, pictures: picturesLoaded }))

        const pictures = await Promise.all(gallery.pictures.map(
          (picture, index) => Http.get(picture.addr, null, 'blob')
            .then(pictureLoaded => {
              picture.addr = URL.createObjectURL(pictureLoaded)
              picturesLoaded.push(picture)
              if (index % 5 === 0 || picturesLoaded.length === gallery.pictures.length) {
                dispatch(setGallery({ ...gallery, pictures: picturesLoaded }))
              }
              return picture
            })
        ))
        gallery.pictures = pictures
        return gallery
      })
      .then(gallery => {
        dispatch(setGallery(gallery))
        dispatch(setIsFetching(false))
      })
  }
}

const VRAC_DESCRIPTION = "Si vous voulez voir des photos de manière alétoire, qui n'ont donc rien à voir les unes avec les autres, vous êtes au bon endroit !"

const fetchPictures = () => {
  return function (dispatch) {
    dispatch(setIsFetching(true))
    return Http.get(`/pictures`)
      .then(json => {
        json.name = 'Vrac'
        json.description = VRAC_DESCRIPTION
        dispatch(setGallery(json))
        dispatch(setIsFetching(false))
      })
  }
}

export {
  types,
  setGallery,
  // fetchImgAddr,
  // loadImages,
  // loadMore,
  // razImgs,
  setCurrentPictureIndex,
  getPictures
}
