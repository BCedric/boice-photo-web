import Http from 'utils/Http'

const types = {
  ADD_GALLERY_PICTURES: 'ADD_GALLERY_PICTURES',
  LOAD_IMAGES: 'LOAD_IMAGES',
  SET_GALLERY_ID: 'SET_GALLERY_ID',
  RAZ_IMGS: 'RAZ_IMGS',
  LOAD_MORE: 'LOAD_MORE',
  SET_IS_FETCHING: 'SET_IS_FETCHING',
  SET_GALLERY_NAME: 'SET_GALLERY_NAME',
  SET_GALLERY: 'SET_GALLERY',
  SET_CURRENT_PICTURE_INDEX: 'SET_CURRENT_PICTURE_INDEX'
}

function addGalleryPictures(pictures) {
  return {
    type: types.ADD_GALLERY_PICTURES,
    pictures
  }
}

function setGallery(gallery) {
  return {
    type: types.SET_GALLERY,
    gallery
  }
}

function setIsFetching(bool) {
  return {
    type: types.SET_IS_FETCHING,
    bool
  }
}

function setCurrentPictureIndex(id) {
  return {
    type: types.SET_CURRENT_PICTURE_INDEX,
    id
  }
}

const getPictures = galleryId =>
  galleryId != null
    ? fetchGallery(galleryId)
    : fetchPictures()

const fetchGallery = galleryId => {
  return function (dispatch) {
    dispatch(setIsFetching(true))
    return Http.get(`/gallery/${galleryId}`)
      .then(json => {
        return json
      })
      .then(gallery => {
        dispatch(setGallery({ ...gallery, pictures: [] }))
        loadPictures(gallery, dispatch)
        return gallery
      })
      .then(gallery => {
        dispatch(setGallery(gallery))
        dispatch(setIsFetching(false))
      })
  }
}

const loadPictures = async (gallery, dispatch) => {
  const picturesLoaded = []
  let nbOfPictures = 0
  gallery.pictures.forEach(
    (picture, index) => {
      Http.get(picture.addr, null, 'blob')
        .then(pictureLoaded => {
          picture.addr = URL.createObjectURL(pictureLoaded)
          picturesLoaded.push(picture)
          nbOfPictures += 1
          if (picturesLoaded.length % 20 === 0 || nbOfPictures === gallery.pictures.length) {
            dispatch(addGalleryPictures(picturesLoaded))
            if (nbOfPictures === gallery.pictures.length) {
              dispatch(setIsFetching(false))
            }
            picturesLoaded.splice(0, picturesLoaded.length - 1)
          }
          return picture
        })
    }
  )
  return picturesLoaded
}

const fetchPictures = () => {
  return function (dispatch) {
    dispatch(setIsFetching(true))
    return Http.get(`/pictures`)
      .then(json => {
        json.name = 'Toutes les photos'
        dispatch(setGallery(json))
        loadPictures(json, dispatch)

      })
  }
}

export {
  types,
  addGalleryPictures,
  setGallery,
  // fetchImgAddr,
  // loadImages,
  // loadMore,
  // razImgs,
  setCurrentPictureIndex,
  getPictures
}
