// import {actionCreator, createTypes} from 'redux-action-creator';
import utils from 'utils/utils'
import Http from 'utils/Http'

const types = {
  LOAD_IMAGES: 'LOAD_IMAGES',
  SET_GALLERY_ID: 'SET_GALLERY_ID',
  RAZ_IMGS: 'RAZ_IMGS',
  LOAD_MORE: 'LOAD_MORE',
  SET_CURRENT_PICTURE_INDEX: 'SET_CURRENT_PICTURE_INDEX',
  SET_LIGHTBOX_IS_OPEN: 'SET_LIGHTBOX_IS_OPEN',
  GO_TO_NEXT: 'GO_TO_NEXT',
  GO_TO_PREVIOUS: 'GO_TO_PREVIOUS',
  SET_IS_FETCHING: 'SET_IS_FETCHING',
  SET_GALLERY_NAME: 'SET_GALLERY_NAME',
  SET_GALLERY: 'SET_GALLERY'
}

function loadImages() {
  return {
    type: types.LOAD_IMAGES
  }
}

function loadMore() {
  return {
    type: types.LOAD_MORE,
  }
}

function razImgs() {
  return {
    type: types.RAZ_IMGS
  }
}

function setGallery(gallery) {
  return {
    type: types.SET_GALLERY,
    gallery
  }
}

function setIsFetching(bool) {
  return {
    type: types.SET_IS_FETCHING,
    bool
  }
}

function setCurrentPictureIndex(id) {
  return {
    type: types.SET_CURRENT_PICTURE_INDEX,
    id
  }
}

function fetchImgAddr(galleryId) {
  return function (dispatch) {
    dispatch(setIsFetching(true))
    const addrToFetch = galleryId != null ? `/gallery/${galleryId}` : `/pictures`
    return Http.get(addrToFetch)
      .then(json => {
        if (json !== undefined) utils.shuffle(json.pictures)
        dispatch(setGallery(json))
        dispatch(loadImages())
        dispatch(setIsFetching(false))
      })
  }
}

const getPictures = galleryId =>
  galleryId != null
    ? fetchGallery(galleryId)
    : fetchPictures()

const fetchGallery = galleryId => {
  return function (dispatch) {
    dispatch(setIsFetching(true))
    return Http.get(`/gallery/${galleryId}`)
      .then(json => {
        dispatch(setGallery(json))
        dispatch(setIsFetching(false))
      })
  }
}

const VRAC_DESCRIPTION = "Si vous voulez voir des photos de manière alétoire, qui n'ont donc rien à voir les unes avec les autres, vous êtes au bon endroit !"

const fetchPictures = () => {
  return function (dispatch) {
    dispatch(setIsFetching(true))
    return Http.get(`/pictures`)
      .then(json => {
        json.name = 'Vrac'
        json.description = VRAC_DESCRIPTION
        dispatch(setGallery(json))
        dispatch(setIsFetching(false))
      })
  }
}

export {
  types,
  setGallery,
  fetchImgAddr,
  loadImages,
  loadMore,
  razImgs,
  setCurrentPictureIndex,
  getPictures
}
