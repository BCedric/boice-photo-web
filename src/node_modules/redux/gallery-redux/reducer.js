import { forEach, clone } from 'lodash'
import { List, fromJS } from 'immutable'
import { types } from './actions'
import config from 'config'

const NB_IMAGES_TO_LOAD = 6

const loadImages = (imgs = List(), state) => {
  var imgAddrsArray = state.gallery.toJS().pictures
  var newImgAddr = clone(imgAddrsArray)
  forEach(imgAddrsArray.filter((addr, index) => index < NB_IMAGES_TO_LOAD), imgAddr => {
    newImgAddr.splice(newImgAddr.indexOf(imgAddr), 1)
    imgs = imgs.push({ src: config.adressServer + imgAddr.addr, width: imgAddr.width, height: imgAddr.height })
  })
  return { ...state, imgs, gallery: state.gallery.set('pictures', newImgAddr) }
}

export default function galleryReducer(state = {}, action) {
  var imgs
  switch (action.type) {
    case types.SET_CURRENT_PICTURE_INDEX:
      return { ...state, currentImage: action.id }
    case types.LOAD_IMAGES:
      if (state.gallery != null) {
        imgs = state.imgs
        return loadImages(imgs, state)
      }
      return state
    case types.LOAD_MORE:
      if (state.gallery != null) {
        return loadImages(state.imgs, state)
      }
      return state
    case types.RAZ_IMGS:
      return { ...state, imgs: null, gallery: null }
    case types.SET_LIGHTBOX_IS_OPEN:
      return { ...state, lightboxIsOpen: action.bool }
    case types.SET_IS_FETCHING:
      return { ...state, isFetching: action.bool }
    case types.SET_GALLERY:
      return { ...state, gallery: action.gallery }
    default:
      return state
  }


}
